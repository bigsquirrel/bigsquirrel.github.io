---
layout: post
title:  "Python 笔记"
date:   2015-04-10 18:00:00
tags:
    - Python
    - note
---
# 数
三种：整数、浮点数、复数

# 字符串
定义：字符串是字符的序列；

方式：单引号、双引号、三引号；

方法：字符串的 `format()` 方法；

# 操作符
相对于其他语言比较少见的：

|表达式|说明|
---|---
x ** y|x 的 y 次方
x // y|取整

# 函数
使用 def 定义一个函数：`def sayHello():`

# 模块


# 数据结构
四种：列表、元组、字典、集合；

1. 列表 list<br />
	定义：用逗号分割 包括在`[ ]`中；<br />
	操作：添加、删除、搜索；<br />
	特点：可修改；<br />

2. 元组<br />
	定义：用逗号分割 包括在`( )`中；<br />
	操作：索引；<br />
	特点：不可修改，类似字符串；元组可以嵌套；<br />

3. 字典<br />
	定义：健值对，使用不可变的对象作为健，可变或不可变的对象作为值，使用 `:`分割；<br />
	操作：添加、删除、索引；<br />
		`ab.items()` 用于获取字典中的每个**健/值对**；<br />
		可使用`in`操作符或`dict`类的`has_key()`方法来检验一个健值对是否存在；<br />

4. 集合<br />
	定义：无序的简单对象的聚集；<br />
	操作：检查是否在集合中；是否为另一个集合的子集；获取两个集合的交集；

# 切片
切片是对*序列*的操作，列表、元组、字符串都属于序列；<br />
切片的操作 `[start:end]`、 `[start:end:step]`；<br />
切片操作还可以用于 copy 对象；<br />
字符串也是对象；

# 面向对象－类
1. self<br />
	类的方法与普通的函数的区别：类的方法必须有一个额外的第一个参数名称，但调用的时候无需为其赋值，这个参数就是 self；
2. __init__(self, name)<br />
	类似于 C++ 中的构造函数
3. 类变量、对象变量<br />
	首先要区别开；<br />
	双下划线前缀的类的成员为私有变量，单下划线前缀约定为本类或者对象中使用的变量；
4. 继承<br />
	继承实现代码重用；<br />
	一个子类型在任何需要父类型的场合可以背替换成父类型，即对象可以被视为父类的实例，称为*多态*；

# 输入输出
1. input() & print()<br />
	`reverse: sep[::-1]`
2. 文件<br />
	file 类的方法：`read()`, `readline()`, `write()`, `close()`<br />
		read 模式：读 r 、写 w 、追加 a
3. pickle 模块<br />
	用于将任意对象持久化的存储在文件中，写入：`pickle.dump(list, f)`，读取：`pickle.load(f)`

# 异常
使用 `try..except` 处理异常；<br />
使用 `raise` 抛出异常；<br />
使用 `try..finally` 善后；<br />
使用 `with` 语句能达到于 `finally` 同样的效果，在启动代码块之前，后台总会调用 `thefile.__enter__` 函数，在代码块结束后又回调用 `thefile.__exit__`函数；<br />

# 标准库
1. sys
2. loggin<br />
	用来获取调试信息
3. urllib & json <br />
	`json.load(urllib.urlopen())`
4. week

# 特性
1. 传送元组
2. lambda<br />
	`lambda` 语句被用来创建新的函数对象，并且在运行时返回它们；
3. 函数参数为元祖或列表<br />
	分别使用 `*`, `**`前缀
4. exec & eval<br />
	`exec` 用于执行存储在字符串或文件中的 Python 语句；<br />
	`eval` 用于执行存储在字符串中的 Python 表达式；
5. assert<br />
	`assert` 用于声明某个条件是真的，若在执行中为假，则引发一个 AssertionError；
6. repr<br />
	`repr` 用于取得对象的规范字符串表示，`eval(repr(object)) == object`；
